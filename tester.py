from homework2_mhanifsaleh import Atom, And, Or, Not, Implies, Iff, KnowledgeBase, satisfying_assignments

def test_atom_equality():
    print("\nPropositional Logic - Test#1: ")
    print("--------------------------------------------------------------------")
    print("Atom('a') == Atom('a'):", Atom("a") == Atom("a"))
    print("******************************")
    print("Atom('a') == Atom('b'):", Atom("a") == Atom("b"))
    print("******************************")
    print("And(Atom('a'), Not(Atom('b'))) == And(Not(Atom('b')), Atom('a')):", And(Atom("a"), Not(Atom("b"))) == And(Not(Atom("b")), Atom("a")))
    print("=====================================================================")
    print("\nPropositional Logic - Test#2:\n ")
    print("--------------------------------------------------------------------")
    a, b, c = map(Atom, "abc")
    print("a,b,c = map(Atom, 'abc')")
    print("Implies(a,Iff(b,c))")
    print(Implies(a, Iff(b, c)))
    print("******************************")
    a, b, c = map(Atom, "abc")
    print("a,b,c = map(Atom, 'abc')")
    print("And(a, Or(Not(b), c))")
    print(And(a, Or(Not(b), c)))
    print("=====================================================================")
    print("\nPropositional Logic - Test#3:\n ")
    print("--------------------------------------------------------------------")
    print("Atom('a').atom_names()")
    print(Atom("a").atom_names())
    print("******************************")
    print("Not (Atom('a')).atom_names()")
    print(Not(Atom("a")).atom_names())
    print("******************************")
    print("a, b, c = map(Atom, 'abc')")
    a, b, c = map(Atom, "abc")
    print("expr = And(a, Implies(b, Iff(a,c)))")
    expr = And(a, Implies(b, Iff(a, c)))
    print("expr.atom_names()")
    print(expr.atom_names())
    print("******************************")
    print("=====================================================================")
    print("\nPropositional Logic - Test#4:\n ")
    print("--------------------------------------------------------------------")
    print("e = Implies(Atom('a'), Atom('b'))")
    e = Implies(Atom("a"), Atom("b"))
    print("e.evaluate({'a': False, 'b': True})")
    print(e.evaluate({"a": False, "b": True}))
    print("******************************")
    print("e.evaluate({'a': True, 'b': False})")
    print(e.evaluate({"a": True, "b": False}))
    print("******************************")
    print("a, b, c = map(Atom, 'abc')")
    a, b, c = map(Atom, "abc")
    print("e = And(Not(a), Or(b, c))")
    e = And(Not(a), Or(b, c))
    print("e.evaluate({'a': False, 'b': False, 'c': True})")
    print(e.evaluate({"a": False, "b": False, "c": True}))
    print("=====================================================================")
    print("\nPropositional Logic - Test#5:\n ")
    print("--------------------------------------------------------------------")
    print("e = Implies(Atom('a'), Atom('b'))")
    j = Implies(Atom("a"), Atom("b"))
    print("a = satisfying_assignments(j)")
    a = satisfying_assignments(j)
    print("next(a)")
    print(next(a))
    print("******************************")
    print("next(a)")
    print(next(a))
    print("******************************")
    print("next(a)")
    print(next(a))
    print("******************************")
    print("e = Iff(Iff(Atom('a'), Atom('b')), Atom('c'))")
    e = Iff(Iff(Atom("a"), Atom("b")), Atom("c"))
    print("list(satisfying_assignments(e))")
    print(list(satisfying_assignments(e)))
    print("=====================================================================")
    print("\nPropositional Logic - Test#6:\n ")
    print("--------------------------------------------------------------------")
    print("Atom('a').to_cnf()")
    print(Atom("a").to_cnf())
    print("******************************")
    print("a, b, c = map(Atom, 'abc')")
    a, b, c = map(Atom, "abc")
    print("Iff(a, Or(b, c)).to_cnf()")
    print(Iff(a, Or(b, c)).to_cnf())
    print("******************************")
    print("Or(Atom('a'), Atom('b')).to_cnf()")
    print(Or(Atom("a"), Atom("b")).to_cnf())
    print("******************************")
    print("a, b, c, d = map(Atom, 'abcd')")
    a, b, c, d = map(Atom, "abcd")
    print("Or(And(a, b), And(c, d)).to_cnf()")
    print(Or(And(a, b), And(c, d)).to_cnf())
    print("=====================================================================")
    print("\nPropositional Logic - Test#7:\n ")
    print("--------------------------------------------------------------------")
    print("a, b, c = map(Atom, 'abc')")
    a, b, c = map(Atom, "abc")
    print("kb = KnowledgeBase()")
    kb = KnowledgeBase()
    print("kb.tell(a)")
    kb.tell(a)
    print("kb.tell(Implies(a, b))")
    kb.tell(Implies(a, b))
    print("kb.get_facts()")
    print(kb.get_facts())
    print("******************************")
    print("kb.ask(x) for x in (a, b, c)")
    for x in (a, b, c):
        print(f"kb.ask({x})")
        print(kb.ask(x))
    print("******************************")





          


test_atom_equality()

